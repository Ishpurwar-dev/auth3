// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6w4xCETj1gYkorDVmc5wx8
// Component: bwLBr7IB5Xyw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Verify from "../../Verify"; // plasmic-import: LK-1y7v1YCMX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6w4xCETj1gYkorDVmc5wx8/projectcss
import sty from "./PlasmicVerify2.module.css"; // plasmic-import: bwLBr7IB5Xyw/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 6wz4CaO-nkvo/icon
import ArrowUpRightSvgrepoCom1Icon from "./icons/PlasmicIcon__ArrowUpRightSvgrepoCom1"; // plasmic-import: 57WzVwD7aYxV/icon

createPlasmicElementProxy;

export type PlasmicVerify2__VariantMembers = {};
export type PlasmicVerify2__VariantsArgs = {};
type VariantPropType = keyof PlasmicVerify2__VariantsArgs;
export const PlasmicVerify2__VariantProps = new Array<VariantPropType>();

export type PlasmicVerify2__ArgsType = {
  email?: string;
  password?: string;
};
type ArgPropType = keyof PlasmicVerify2__ArgsType;
export const PlasmicVerify2__ArgProps = new Array<ArgPropType>(
  "email",
  "password"
);

export type PlasmicVerify2__OverridesType = {
  verifyEmail?: Flex__<"div">;
  group10?: Flex__<"div">;
  group12?: Flex__<"div">;
  verify?: Flex__<typeof Verify>;
  text?: Flex__<"div">;
};

export interface DefaultVerify2Props {
  email?: string;
  password?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVerify2__RenderFunc(props: {
  variants: PlasmicVerify2__VariantsArgs;
  args: PlasmicVerify2__ArgsType;
  overrides: PlasmicVerify2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          email: "rajendra@levelworks.co"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"verifyEmail"}
      data-plasmic-override={overrides.verifyEmail}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.verifyEmail
      )}
    >
      <div
        data-plasmic-name={"group10"}
        data-plasmic-override={overrides.group10}
        className={classNames(projectcss.all, sty.group10)}
      >
        <div
          data-plasmic-name={"group12"}
          data-plasmic-override={overrides.group12}
          className={classNames(projectcss.all, sty.group12)}
        >
          <Verify
            data-plasmic-name={"verify"}
            data-plasmic-override={overrides.verify}
            className={classNames("__wab_instance", sty.verify)}
            email={(() => {
              try {
                return $ctx.query.email;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "rajendra@levelworks.co";
                }
                throw e;
              }
            })()}
            password={(() => {
              try {
                return $props.password;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
      {false ? (
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Forgot password?"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  verifyEmail: ["verifyEmail", "group10", "group12", "verify", "text"],
  group10: ["group10", "group12", "verify"],
  group12: ["group12", "verify"],
  verify: ["verify"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  verifyEmail: "div";
  group10: "div";
  group12: "div";
  verify: typeof Verify;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVerify2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVerify2__VariantsArgs;
    args?: PlasmicVerify2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVerify2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVerify2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVerify2__ArgProps,
          internalVariantPropNames: PlasmicVerify2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVerify2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "verifyEmail") {
    func.displayName = "PlasmicVerify2";
  } else {
    func.displayName = `PlasmicVerify2.${nodeName}`;
  }
  return func;
}

export const PlasmicVerify2 = Object.assign(
  // Top-level PlasmicVerify2 renders the root element
  makeNodeComponent("verifyEmail"),
  {
    // Helper components rendering sub-elements
    group10: makeNodeComponent("group10"),
    group12: makeNodeComponent("group12"),
    verify: makeNodeComponent("verify"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicVerify2
    internalVariantProps: PlasmicVerify2__VariantProps,
    internalArgProps: PlasmicVerify2__ArgProps
  }
);

export default PlasmicVerify2;
/* prettier-ignore-end */
