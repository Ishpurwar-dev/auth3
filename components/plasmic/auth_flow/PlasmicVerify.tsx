// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6w4xCETj1gYkorDVmc5wx8
// Component: LK-1y7v1YCMX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsxhQZeI50DLq3 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xhQZeI50dLq3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6w4xCETj1gYkorDVmc5wx8/projectcss
import sty from "./PlasmicVerify.module.css"; // plasmic-import: LK-1y7v1YCMX/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 6wz4CaO-nkvo/icon
import ArrowUpRightSvgrepoCom1Icon from "./icons/PlasmicIcon__ArrowUpRightSvgrepoCom1"; // plasmic-import: 57WzVwD7aYxV/icon

createPlasmicElementProxy;

export type PlasmicVerify__VariantMembers = {};
export type PlasmicVerify__VariantsArgs = {};
type VariantPropType = keyof PlasmicVerify__VariantsArgs;
export const PlasmicVerify__VariantProps = new Array<VariantPropType>();

export type PlasmicVerify__ArgsType = {
  email?: string;
  password?: string;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
};
type ArgPropType = keyof PlasmicVerify__ArgsType;
export const PlasmicVerify__ArgProps = new Array<ArgPropType>(
  "email",
  "password",
  "start",
  "label",
  "end"
);

export type PlasmicVerify__OverridesType = {
  rectangle5?: Flex__<"div">;
  group11?: Flex__<"div">;
  group7?: Flex__<"div">;
  ariaButton?: Flex__<typeof BaseButton>;
  softBackground?: Flex__<"div">;
  border?: Flex__<"div">;
  interactionEffect?: Flex__<"div">;
};

export interface DefaultVerifyProps {
  email?: string;
  password?: string;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVerify__RenderFunc(props: {
  variants: PlasmicVerify__VariantsArgs;
  args: PlasmicVerify__ArgsType;
  overrides: PlasmicVerify__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          email: "rajendra@levelworks.co"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const temp = true;
                setTimeout(() => {
                  temp = false;
                  return false;
                }, 60000);
                return temp;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxhQZeI50DLq3()
  });

  return (
    <div
      data-plasmic-name={"rectangle5"}
      data-plasmic-override={overrides.rectangle5}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.rectangle5
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"group11"}
        data-plasmic-override={overrides.group11}
        hasGap={true}
        className={classNames(projectcss.all, sty.group11)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wyuDg
          )}
        >
          {"Verify your email"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oRdf
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              <React.Fragment>
                {
                  "Please verify your email address by clicking \nthe link sent to"
                }
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {" rajendra@levelworks.co"}
              </span>
            </React.Fragment>
          ) : hasVariant(globalVariants, "screen", "tablet") ? (
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "Enter your email and we will send you reset password link " +
                    $props.email
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Please verify your email address by clicking \nthe link sent to rajendra@levelworks.co";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return (
                    "Please verify your email address by clicking the link sent to " +
                    $props.email
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Please verify your email address by clicking \nthe link sent to rajendra@levelworks.co";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"group7"}
          data-plasmic-override={overrides.group7}
          hasGap={true}
          className={classNames(projectcss.all, sty.group7)}
        >
          <BaseButton
            data-plasmic-name={"ariaButton"}
            data-plasmic-override={overrides.ariaButton}
            className={classNames("__wab_instance", sty.ariaButton)}
            isDisabled={(() => {
              try {
                return $state.disable;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            onPress={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return $props.email;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return $props.password;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions[
                      "SupabaseUserGlobalContext.signup"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateDisable"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["disable"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDisable"] != null &&
                typeof $steps["updateDisable"] === "object" &&
                typeof $steps["updateDisable"].then === "function"
              ) {
                $steps["updateDisable"] = await $steps["updateDisable"];
              }
            }}
            target={(() => {
              try {
                return $props.openLinkInNewTab ? "_blank" : "_self";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            {false ? (
              <div
                data-plasmic-name={"softBackground"}
                data-plasmic-override={overrides.softBackground}
                className={classNames(projectcss.all, sty.softBackground)}
              />
            ) : null}
            {false ? (
              <div
                data-plasmic-name={"border"}
                data-plasmic-override={overrides.border}
                className={classNames(projectcss.all, sty.border)}
              />
            ) : null}
            <div
              data-plasmic-name={"interactionEffect"}
              data-plasmic-override={overrides.interactionEffect}
              className={classNames(projectcss.all, sty.interactionEffect)}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sz4Cd)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___8Ci9T)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <CircleIcon
                      className={classNames(projectcss.all, sty.svg__qnHo6)}
                      role={"img"}
                    />
                  ),

                  value: args.start,
                  className: classNames(sty.slotTargetStart)
                })}
              </div>
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hes37
                    )}
                  >
                    {"RESEND VERIFICATION EMAIL"}
                  </div>
                ),
                value: args.label,
                className: classNames(sty.slotTargetLabel)
              })}
              <div className={classNames(projectcss.all, sty.freeBox__hnLj8)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <ArrowUpRightSvgrepoCom1Icon
                      className={classNames(projectcss.all, sty.svg__xbKhf)}
                      role={"img"}
                    />
                  ),

                  value: args.end,
                  className: classNames(sty.slotTargetEnd)
                })}
              </div>
            </Stack__>
          </BaseButton>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rectangle5: [
    "rectangle5",
    "group11",
    "group7",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect"
  ],
  group11: [
    "group11",
    "group7",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect"
  ],
  group7: [
    "group7",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect"
  ],
  ariaButton: ["ariaButton", "softBackground", "border", "interactionEffect"],
  softBackground: ["softBackground"],
  border: ["border"],
  interactionEffect: ["interactionEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rectangle5: "div";
  group11: "div";
  group7: "div";
  ariaButton: typeof BaseButton;
  softBackground: "div";
  border: "div";
  interactionEffect: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVerify__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVerify__VariantsArgs;
    args?: PlasmicVerify__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVerify__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVerify__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVerify__ArgProps,
          internalVariantPropNames: PlasmicVerify__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVerify__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rectangle5") {
    func.displayName = "PlasmicVerify";
  } else {
    func.displayName = `PlasmicVerify.${nodeName}`;
  }
  return func;
}

export const PlasmicVerify = Object.assign(
  // Top-level PlasmicVerify renders the root element
  makeNodeComponent("rectangle5"),
  {
    // Helper components rendering sub-elements
    group11: makeNodeComponent("group11"),
    group7: makeNodeComponent("group7"),
    ariaButton: makeNodeComponent("ariaButton"),
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),

    // Metadata about props expected for PlasmicVerify
    internalVariantProps: PlasmicVerify__VariantProps,
    internalArgProps: PlasmicVerify__ArgProps
  }
);

export default PlasmicVerify;
/* prettier-ignore-end */
